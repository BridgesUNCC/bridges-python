from bridges.bst_element import *
##
 #  @brief The This class can be used to create K-d Tree  elements, derived
 #  from BSTElement. K-D trees can be thought of as the spatial equivalent
 #  binary search trees and operate on multiple dimensions (2D and 3D are
 #  most common). These trees serve as a representation of the underlying
 #  geometrically defined spaces. Specialized versions of these trees
 #  include quadtrees and octrees, which subdivide into equal sized quadrants
 #  octants at each level, respectively.
 #  This class extends the BSTElement class by adding a dimension property.
 #  It also includes a thickness property for displaying the partitioning
 #  lines generated by the convex decomposition.
 #
 #  convenient to generate visual representation
 #  to allow for use in a binary search tree implementation.
 #
 # @author Kalpathi Subramanian
 # @date 12/26/18
 #

class KdTreeElement(BSTElement):

    ##
    # Constructs a KdTreeElement wit the provided value, label, key,
    # left and right KdTree elements. The defaults will be used if
    # not provided
    #
    # @param k The key for the ordering
    # @param val The Data to hold
    # @param lab the label to show
    # @param l The left KdTree Element
    # @param r the right KdTree element
    def __init__(self, k = None, dim = None, th = None, l = None, r = None, val = None, lab = None):
        if k is not None:
            super(BSTElement, self).__init__(e = val, left = l, right = r)
            self.thickness = th
            self.dimension = dim
            self.set_key(k)
        else:
            super(BSTElement, self).__init__()
            self.thickness = 0.0
            self.dimension = 0